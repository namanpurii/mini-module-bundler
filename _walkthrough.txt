Implementation Overview:
    1. Parse a single file and extract its dependencies
    2. Recursively build a dependency graph
    3. Package everything into a single file.

We have taken a simple example in our src directory:
    - Where index.js has single dependency from message.js and, message.js has single 
    dependency from name.js
    - bundle.js file in the root directory is the output file; as a result of bundling 
    dependencies from all the files in the src directory.

Notes:
- Transpile the code from ES6 to CJS using Babel; using this command in the terminal 
  window: `npx babel src --out-dir lib`
- We are using babylon as our js-parser to generate the AST using the .parse() method. Could
  have also used @babel-parser but it apparently uses babylon under the hood. The Babel AST 
  format results were a bit scuffed for me. Therfore, resorting to babylon.
- React uses something called loose-envify to generate its AST as a json file. An
  AST aka Abstract Syntax Tree is generated by a language parser(in our case a JavaScript
  parser), which is a tree built from tokens extracted from the Javascript code.



